{
    "openapi": "3.0.3",
    "info": {
        "title": "MapApp",
        "version": "1.0",
        "description": "An API for application, which helps delivery companies to plan their routes.",
        "x-logo": {
            "url": ""
        }
    },
    "servers": [
        {
            "url": "http://localhost:8081/api/v2",
            "description": "Local server"
        }
    ],
    "paths": {
        "/data/client": {
            "summary": "Client",
            "description": "Client is an object representing the client of the delivery company. It has a type field, which may have only \"recipient\" or \"sender\" values. Type \"sender\" is a company from which the parcels are being shipped. Type \"recipient\" is a person/another company to whom a parcels are delivered.\nNotice that only registered users having created a Profile can save their Clients' data.",
            "get": {
                "tags": [
                    "client"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "client": {
                                        "value": {
                                            "data": [
                                                {
                                                    "id": 1,
                                                    "username": "user1",
                                                    "name": "User",
                                                    "type": "sender",
                                                    "city": "Helsinki",
                                                    "street": "Ruusulankatu",
                                                    "building": "4B",
                                                    "flat": 12,
                                                    "lat": 24.9245931,
                                                    "lon": 60.1815267
                                                },
                                                {
                                                    "id": 2,
                                                    "username": "user2",
                                                    "name": "User",
                                                    "type": "recipient",
                                                    "city": "Lahti",
                                                    "street": "Leantie",
                                                    "building": "19",
                                                    "flat": 67,
                                                    "lat": 25.6664544,
                                                    "lon": 60.9702099
                                                }
                                            ],
                                            "metadata": {
                                                "currentPage": 3,
                                                "limit": 2
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Successfully requested"
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1719224545166
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1719224573070
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Read all Clients",
                "description": "Read all Client associated with the logged-in user Profile. It is possible to request only own Clients\n\n| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own  |\n| Pagination                       | yes |\n| Search                             | yes |"
            },
            "put": {
                "requestBody": {
                    "description": "Notice that only the id field and  fields, that need to be updated should be provided",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "client"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204",
                        "x-last-modified": 1718890060914
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718890078434
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718890117079
                    },
                    "404": {
                        "$ref": "#/components/responses/404",
                        "x-last-modified": 1718890145614
                    },
                    "409": {
                        "$ref": "#/components/responses/409",
                        "x-last-modified": 1718890158175
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718890182150
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Update Client",
                "description": "| Requirement / Function | Is Required / Has |\n| ---------------------- | ----------------- |\n| Authentication         | yes |\n| Authorization          | only own |"
            },
            "post": {
                "requestBody": {
                    "description": "Notice that the Client will be automatically associated with the logged-in user profile",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "client"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "client": {
                                        "value": {
                                            "data": {
                                                "id": 1,
                                                "username": "user1",
                                                "name": "User",
                                                "type": "sender",
                                                "city": "Helsinki",
                                                "street": "Ruusulankatu",
                                                "building": "4B",
                                                "flat": 12,
                                                "lat": 24.9245931,
                                                "lon": 60.1815267
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Successfully created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718887948467
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718895012807
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409",
                        "x-last-modified": 1718887965493
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718887982927
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "operationId": "client_create",
                "summary": "Create client",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only for own Profile  |\n"
            }
        },
        "/data/profile": {
            "summary": "User profile",
            "description": "User profile is used to identify a user and allow to sign in to the application. \nSigned in user has more functionality as he/she can save different data associated with the user.",
            "get": {
                "tags": [
                    "profile"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "profile": {
                                        "value": {
                                            "data": {
                                                "id": 1,
                                                "username": "user1"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Successfully requested"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Read profile by id",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |\n| Pagination                       | no |\n| Search                             | no |"
            },
            "put": {
                "requestBody": {
                    "description": "Notice that only the id field and  fields, that need to be updated should be provided",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "profile"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Update profile",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes  |\n| Authorization                  | only own |"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "profile"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "profile": {
                                        "value": {
                                            "data": {
                                                "id": 1,
                                                "username": "user1"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created successfully"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Create user profile",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------  |\n| Authentication             | no |\n| Authorization              | no |"
            },
            "delete": {
                "tags": [
                    "profile"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Delete profile",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |"
            }
        },
        "/data/client/{id}": {
            "summary": "Client",
            "description": "Client is an object representing the client of the delivery company. It has a type field, which may have only \"recipient\" or \"sender\" values. Type \"sender\" is a company from which the parcels are being shipped. Type \"recipient\" is a person/another company to whom a parcels are delivered.\nNotice that only registered users having created a Profile can save their Clients' data.",
            "get": {
                "tags": [
                    "client"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "client": {
                                        "value": {
                                            "data": {
                                                "id": 1,
                                                "username": "user1",
                                                "name": "User",
                                                "type": "sender",
                                                "city": "Helsinki",
                                                "street": "Ruusulankatu",
                                                "building": "4B",
                                                "flat": 12,
                                                "lat": 24.9245931,
                                                "lon": 60.1815267
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Successfully requested"
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718889211678
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718889224633
                    },
                    "404": {
                        "$ref": "#/components/responses/404",
                        "x-last-modified": 1718889898774
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718889259586
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Read Client by id",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |\n| Pagination                       | no |\n| Search                             | no |"
            },
            "delete": {
                "tags": [
                    "client"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204",
                        "x-last-modified": 1718889326604
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718889339851
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718889350835
                    },
                    "404": {
                        "$ref": "#/components/responses/404",
                        "x-last-modified": 1718889927760
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718889941430
                    }
                },
                "deprecated": false,
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Delete Client by id",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |"
            },
            "parameters": [
                {
                    "examples": {
                        "id": {
                            "value": "74"
                        }
                    },
                    "name": "id",
                    "description": "client id",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/data/order": {
            "summary": "Order",
            "description": "Order is an object holding a sender and recipient info. These objects can also be used in calculating a route.",
            "get": {
                "tags": [
                    "order"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "order": {
                                        "value": {
                                            "data": [
                                                {
                                                    "id": 1,
                                                    "createdAt": 1719581003,
                                                    "senderId": 1,
                                                    "recipientId": 2
                                                },
                                                {
                                                    "id": 2,
                                                    "createdAt": 1719581145,
                                                    "senderId": 3,
                                                    "recipientId": 4
                                                }
                                            ],
                                            "metadata": {
                                                "currentPage": 3,
                                                "limit": 2
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1719224545166
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1719224573070
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Read all Orders",
                "description": "Read all Orders associated with the logged-in user Profile.\n\n| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own  |\n| Pagination                       | yes |\n| Search                             | no |"
            },
            "put": {
                "requestBody": {
                    "description": "Notice that only the id field and  fields, that need to be updated should be provided",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "order"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Update Order",
                "description": "| Requirement / Function | Is Required / Has |\n| ---------------------- | ----------------- |\n| Authentication         | yes |\n| Authorization          | only own |"
            },
            "post": {
                "requestBody": {
                    "description": "Notice that the Order will be automatically associated with the logged-in user profile",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "order"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "order": {
                                        "value": {
                                            "data": {
                                                "id": 1,
                                                "createdAt": 1719581003,
                                                "senderId": 1,
                                                "recipientId": 2
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718887948467
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718895012807
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718887982927
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Order",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only for own Profile |\n"
            }
        },
        "/data/order/{id}": {
            "summary": "User profile",
            "description": "Order is an object holding a sender and recipient info. These objects can also be used in calculating a route.",
            "get": {
                "tags": [
                    "order"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id",
                        "name": "id",
                        "x-last-modified": 1718888757237
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "order": {
                                        "value": {
                                            "data": {
                                                "id": 1,
                                                "createdAt": 1719581003,
                                                "senderId": 1,
                                                "recipientId": 2
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718889211678
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718889224633
                    },
                    "404": {
                        "$ref": "#/components/responses/404",
                        "x-last-modified": 1718889898774
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718889259586
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Read order by id",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |\n| Pagination                       | no |\n| Search                             | no |"
            },
            "delete": {
                "tags": [
                    "order"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id",
                        "name": "id",
                        "x-last-modified": 1718889306137
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204",
                        "x-last-modified": 1718889326604
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718889339851
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718889350835
                    },
                    "404": {
                        "$ref": "#/components/responses/404",
                        "x-last-modified": 1718889927760
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718889941430
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Delete order",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |"
            },
            "parameters": [
                {
                    "examples": {
                        "id": {
                            "value": "86"
                        }
                    },
                    "name": "id",
                    "description": "order id",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/data/order/done": {
            "post": {
                "requestBody": {
                    "description": "Notice that all ids, which are not associated with the user profile will be ignored",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderDone"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "order"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Delivered orders",
                "description": "Delievered orders ids can be sent and they will be deleted from the system.\n\n| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |"
            }
        },
        "/data/profile/signIn": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SignIn"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "profile"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "signIn": {
                                        "value": {
                                            "data": {
                                                "id": 1,
                                                "username": "user1",
                                                "accessToken": "sdfgdfhgjklsdfj8r347u58hf98jn3849yfh3ruhnfjr",
                                                "expiresOn": 1722173145
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "summary": "Signing in profile",
                "description": "In the response the Bearer token will be returned, which should be used for authentication in the system. Notice that authentication is required for almost every /data endpoints. 403 will be returned if credetials are wrong"
            }
        },
        "/address/reverse": {
            "get": {
                "tags": [
                    "address"
                ],
                "parameters": [
                    {
                        "examples": {
                            "1": {
                                "value": "60.2078752"
                            }
                        },
                        "name": "lat",
                        "description": "latitude of the point",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "examples": {
                            "1": {
                                "value": "24.567"
                            }
                        },
                        "name": "lon",
                        "description": "Longitude of the point",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "lat": "60.20823895",
                                                "lon": "24.568096797050163",
                                                "house_number": "14",
                                                "road": "Peringintie",
                                                "neighbourhood": "Perinki",
                                                "suburb": "Espoonkartano",
                                                "city_district": "Suur-Kauklahti",
                                                "city": "Espoo",
                                                "municipality": "Helsinki sub-region",
                                                "county": "Uusimaa",
                                                "ISO3166-2-lvl6": "FI-18",
                                                "state_district": "Southern Finland",
                                                "region": "Mainland Finland",
                                                "postcode": "02870",
                                                "country": "Finland",
                                                "country_code": "fi"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Success with body"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503_daily_limit"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get address by coordinates",
                "description": "Request an found address information for provided latitude and longitude coordinates. Notice, that the closes address (if any) will be returned and its latitude and longitude can be slightly different than in the request.\n\nNotice, that the enpoint is using an external API, which has some limits.\n\nThe first limit is the daily limit, wherefore when this limit is exceeded the LIMIT_EXCEEDED error with status 503 will be returned.\n\nThe second limit is how much requests per second can be made. The API can handle it automatically by adding a throttling for each request to this endpoint. In case when there are multiple requests made even from different clients, the response will be delayed. The more simultenious requests there are the longer client should wait. It is advised to add some indication for the client that the request is delayed."
            }
        },
        "/address/validate": {
            "get": {
                "tags": [
                    "address"
                ],
                "parameters": [
                    {
                        "examples": {
                            "1": {
                                "value": "Helsinki"
                            }
                        },
                        "name": "city",
                        "description": "city",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "examples": {
                            "1": {
                                "value": "Korppaanmäentie"
                            }
                        },
                        "name": "street",
                        "description": "Street name only",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "examples": {
                            "1": {
                                "value": "37"
                            }
                        },
                        "name": "building",
                        "description": "building number, can be also with a letter \"34 D\"",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "lat": "60.2037651",
                                                "lon": "24.8959926",
                                                "display_name": "Korppaanmäentie, Pikku Huopalahti, Ruskeasuo, Western major district, Helsinki, Helsinki sub-region, Uusimaa, Southern Finland, Mainland Finland, 00300, Finland",
                                                "class": "highway",
                                                "type": "tertiary",
                                                "importance": 0.43001
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Success with body"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503_daily_limit"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Validate address exsistance",
                "description": "Validate that the address exsists. The found address information will be returned.\n\nNotice, that the enpoint is using an external API, which has some limits.\n\nThe first limit is the daily limit, wherefore when this limit is exceeded the LIMIT_EXCEEDED error with status 503 will be returned.\n\nThe second limit is how much requests per second can be made. The API can handle it automatically by adding a throttling for each request to this endpoint. In case when there are multiple requests made even from different clients, the response will be delayed. The more simultenious requests there are the longer client should wait. It is advised to add some indication for the client that the request is delayed."
            }
        },
        "/address/autocomplete": {
            "get": {
                "tags": [
                    "address"
                ],
                "parameters": [
                    {
                        "examples": {
                            "1": {
                                "value": "Helsinki"
                            }
                        },
                        "name": "city",
                        "description": "city, supported values: Helsinki, Vantaa, Espoo, Lahti, Tampere and Turku",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "examples": {
                            "1": {
                                "value": "Hiekka"
                            }
                        },
                        "name": "search",
                        "description": "Street name to autocomplete",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": [
                                                "Hiekkakiventie",
                                                "Hiekkakivenpolku",
                                                "Hiekkalaiturintie",
                                                "Hiekkalaiturinaukio",
                                                "Hiekkalaituri"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Success with body"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503_daily_limit"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Street name autocomplete",
                "description": "Search for street names in the specified city.\n\nNotice, that there is a limited cities amount are supported: Helsinki, Vantaa, Espoo, Lahti, Tampere and Turku.\n\nNotice, that the enpoint is using an external API, which has some limits.\n\nThe first limit is the daily limit, wherefore when this limit is exceeded the LIMIT_EXCEEDED error with status 503 will be returned.\n\nThe second limit is how much requests per second can be made. The API can handle it automatically by adding a throttling for each request to this endpoint. In case when there are multiple requests made even from different clients, the response will be delayed. The more simultenious requests there are the longer client should wait. It is advised to add some indication for the client that the request is delayed."
            }
        },
        "/data/routing/route": {
            "post": {
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoutingCoordinates"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "routing"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "bbox": {
                                                    "type": "array",
                                                    "items": {
                                                        "format": "float",
                                                        "type": "number"
                                                    },
                                                    "example": [
                                                        24.912149,
                                                        60.159777,
                                                        24.968127,
                                                        60.187661
                                                    ]
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "example": "Feature"
                                                },
                                                "properties": {
                                                    "type": "object",
                                                    "properties": {
                                                        "way_points": {
                                                            "type": "array",
                                                            "items": {
                                                                "format": "int32",
                                                                "type": "integer"
                                                            },
                                                            "example": [
                                                                0,
                                                                235
                                                            ]
                                                        },
                                                        "summary": {
                                                            "type": "object",
                                                            "properties": {
                                                                "distance": {
                                                                    "format": "float",
                                                                    "type": "number",
                                                                    "example": 6138.2
                                                                },
                                                                "duration": {
                                                                    "format": "float",
                                                                    "type": "number",
                                                                    "example": 1193.2
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "geometry": {
                                                    "type": "object",
                                                    "properties": {
                                                        "coordinates": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "array",
                                                                "items": {
                                                                    "format": "float",
                                                                    "type": "number"
                                                                }
                                                            },
                                                            "example": [
                                                                [
                                                                    24.968127,
                                                                    60.183877
                                                                ],
                                                                [
                                                                    24.96799,
                                                                    60.18394
                                                                ],
                                                                [
                                                                    24.967846,
                                                                    60.184014
                                                                ]
                                                            ]
                                                        },
                                                        "type": {
                                                            "type": "string",
                                                            "example": "LineString"
                                                        }
                                                    }
                                                },
                                                "info": {
                                                    "type": "object",
                                                    "properties": {
                                                        "distance": {
                                                            "format": "float",
                                                            "type": "number",
                                                            "example": 6138.2
                                                        },
                                                        "duration": {
                                                            "format": "float",
                                                            "type": "number",
                                                            "example": 1193.2
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Found route"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503_daily_limit"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Calculate route for specified coordinates",
                "description": "The route is calculated throught coordinates specified in the coordinates array.\n\nNotice, that the enpoint is using an external API, which has some limits.\n\nThe first limit is the daily limit, wherefore when this limit is exceeded the LIMIT_EXCEEDED error with status 503 will be returned.\n\nThe second limit is how much requests per second can be made. The API can handle it automatically by adding a throttling for each request to this endpoint. In case when there are multiple requests made even from different clients, the response will be delayed. The more simultenious requests there are the longer client should wait. It is advised to add some indication for the client that the request is delayed.\n\nNotice that the route will be the shortest one that can be between the coordinates, so order of them almost does not matter.\n\nNotice, that if the startCoordinateIndex is not specified the first coordinate in the coordinates array will be used as start point. If the endCoordinateIndex is not specified the last coordinate will be used the end point in the route.\n\nThe route can also be modified for avoiding centers of the cities. There are two possible ways to do it. If avoidCityCenters is set up to true all the centers will be avoided (which can be found in the system). If only part of the centers should be avoided the cityCentersToAvoid array with city names should be specified. Notice, that if avoidCityCenters is true all centers will be avoided even if cityCentersToAvoid is also specified.\n\nThe isTrafficSituation set to true will add avoidance of the places with a slow traffic (for Finland only). These places list is updated every 15 min."
            }
        }
    },
    "components": {
        "schemas": {
            "200": {
                "description": "\"data\"-field contains array of requested objects. \"metadata\"-field contains the pagination data",
                "required": [
                    "data",
                    "metadata"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "properties": {
                            "currentPage": {
                                "description": "The current page number",
                                "type": "integer"
                            },
                            "limit": {
                                "description": "The limit of items per page",
                                "type": "integer"
                            }
                        }
                    }
                }
            },
            "201": {
                "description": "\"data\"-field contains created object.",
                "required": [
                    "data"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object"
                    }
                }
            },
            "APIErrorRes": {
                "description": "Error response. Notice that errors field is always an array. Data can be ever empty object, null or undefined.",
                "type": "object",
                "properties": {
                    "data": {
                        "description": "An empty object for the data field",
                        "type": "object"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIError"
                        }
                    }
                },
                "x-last-modified": 1718628043172
            },
            "APIError": {
                "description": "Interface for all errors, which may occur. Notice that the error has type property, which can be used for determining the object type and be parsed accordingly. If any unexpected errors occurred where will be additional field containing the error. The name field is common reason describing what kind of error happened and it is a enum value. The reason field is a concrete reason why the error happened and it is a enum value. The location field is describing possible error place in the request and it a enum value.\n\nErrorName enum:\n| Key | Value |\n| -------- | -------- |\n| NOT_FOUND | 'NOT_FOUND' | \n| BAD_REQUEST | 'BAD_REQUEST' | \n| VALIDATION | 'VALIDATION' | \n| NOT_AUTHENTICATED | 'NOT_AUTHENTICATED' | \n| NOT_AUTHORIZED | 'NOT_AUTHORIZED' | \n| TOO_MANY_REQUESTS | 'TOO_MANY_REQUESTS' | \n| SERVER_ERROR | 'SERVER_ERROR' | \n| UNEXPECTED | 'UNEXPECTED' | \n\nErrorReason enum:\n| Key | Value |\n| -------- | -------- |\n| NOT_FOUND | 'NOT_FOUND' | \n| BAD_REQUEST | 'BAD_REQUEST' | \n| REQUIRED | 'REQUIRED' | \n| NOT_ALLOWED | 'NOT_ALLOWED' | \n| VALIDATION | 'VALIDATION' | \n| NOT_STRING | 'NOT_STRING' | \n| NOT_NUMBER | 'NOT_NUMBER' | \n| NOT_BOOLEAN | 'NOT_BOOLEAN' | \n| NOT_AUTHENTICATED | 'NOT_AUTHENTICATED' | \n| AUTH_TOKEN_NOT_PROVIDED | 'AUTH_TOKEN_NOT_PROVIDED' | \n| INVALID_AUTH_TOKEN_FORMAT | 'INVALID_AUTH_TOKEN_FORMAT' | \n| INVALID_AUTH_TOKEN | 'INVALID_AUTH_TOKEN' | \n| AUTHENTICATION_FAILED | 'AUTHENTICATION_FAILED' | \n| WRONG_CREDENTIALS | 'WRONG_CREDENTIALS' | \n| NOT_AUTHORIZED | 'NOT_AUTHORIZED' | \n| TOO_MANY_REQUESTS | 'TOO_MANY_REQUESTS' | \n| SERVER_MISCONFIGURED | 'SERVER_MISCONFIGURED' | \n| SERVER_ERROR | 'SERVER_ERROR' | \n| UNEXPECTED | 'UNEXPECTED' | \n\nErrorLocation enum:\n| Key | Value |\n| -------- | -------- |\n| HEADER | 'header' | \n| BODY | 'body' | \n| PARAM | 'param' | \n| QUERY | 'query' | ",
                "required": [],
                "enum": [],
                "type": "object",
                "properties": {
                    "reason": {
                        "description": "The reason for the error",
                        "type": "string",
                        "example": "REQUIRED"
                    },
                    "status": {
                        "description": "The HTTP status code",
                        "type": "integer",
                        "example": 400
                    },
                    "location": {
                        "description": "The approximate location of the error",
                        "type": "string",
                        "example": "body"
                    },
                    "message": {
                        "description": "The error message",
                        "type": "string",
                        "example": "\"password\" is required"
                    },
                    "endpoint": {
                        "description": "The endpoint where the error occurred",
                        "type": "string",
                        "example": "/api/v2/data/profile"
                    },
                    "field": {
                        "description": "The field causing the error",
                        "type": "string",
                        "example": "password"
                    },
                    "additional": {
                        "nullable": true,
                        "description": "Additional information about the error",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the error",
                        "type": "string",
                        "example": "VALIDATION"
                    },
                    "type": {
                        "description": "The type of the error",
                        "type": "string",
                        "example": "APIError"
                    }
                },
                "x-last-modified": 1718631391947
            },
            "ProfileCreate": {
                "description": "Profile creation request body",
                "required": [
                    "username",
                    "password"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "description": "unique",
                        "type": "string",
                        "example": "user1"
                    },
                    "password": {
                        "type": "string",
                        "example": "my_password"
                    }
                },
                "x-last-modified": 1718631417714
            },
            "ProfileUpdate": {
                "description": "Profile update request body",
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "description": "unique",
                        "type": "string",
                        "example": "user1"
                    },
                    "password": {
                        "type": "string",
                        "example": "my_password"
                    }
                },
                "x-last-modified": 1718888436324
            },
            "ClientCreate": {
                "description": "Client creation request body",
                "required": [
                    "username",
                    "type",
                    "city",
                    "street",
                    "building"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "description": "unique",
                        "type": "string",
                        "example": "client1"
                    },
                    "name": {
                        "type": "string",
                        "example": "Client Name"
                    },
                    "type": {
                        "description": "recipient or sender",
                        "type": "string",
                        "example": "recipient"
                    },
                    "city": {
                        "type": "string",
                        "example": "Helsinki"
                    },
                    "street": {
                        "description": "street name only, without building",
                        "type": "string",
                        "example": "Punanotkonkatu"
                    },
                    "building": {
                        "description": "can be number or number with letter",
                        "type": "string",
                        "example": "3"
                    },
                    "flat": {
                        "description": "optional and not validated",
                        "type": "integer",
                        "example": 1
                    }
                }
            },
            "OrderUpdate": {
                "description": "Object for updating an order",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "senderId": {
                        "description": "foreign key to client table with type sender",
                        "type": "integer",
                        "example": 1
                    },
                    "recipientId": {
                        "description": "foreign key to client table with type recipient",
                        "type": "integer",
                        "example": 1
                    }
                }
            },
            "OrderCreate": {
                "description": "Object for creating an order",
                "type": "object",
                "properties": {
                    "senderId": {
                        "description": "foreign key to client table with type sender",
                        "type": "integer",
                        "example": 1
                    },
                    "recipientId": {
                        "description": "foreign key to client table with type recipient",
                        "type": "integer",
                        "example": 1
                    }
                }
            },
            "OrderDone": {
                "description": "Delivered orders, that can be sent here and be deleted from the system",
                "type": "object",
                "properties": {
                    "orderIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "example": {
                    "orderIds": [
                        1,
                        2,
                        3
                    ]
                }
            },
            "ClientUpdate": {
                "description": "Client update request body",
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "read-only",
                        "type": "integer",
                        "example": 1
                    },
                    "username": {
                        "description": "unique",
                        "type": "string",
                        "example": "client1"
                    },
                    "name": {
                        "type": "string",
                        "example": "Client Name"
                    },
                    "type": {
                        "description": "recipient or sender",
                        "type": "string",
                        "example": "recipient"
                    },
                    "city": {
                        "type": "string",
                        "example": "Helsinki"
                    },
                    "street": {
                        "description": "street name only, without building",
                        "type": "string",
                        "example": "Punanotkonkatu"
                    },
                    "building": {
                        "description": "can be number or number with letter",
                        "type": "string",
                        "example": "3"
                    },
                    "flat": {
                        "description": "optional and not validated",
                        "type": "integer",
                        "example": 1
                    }
                }
            },
            "SignIn": {
                "description": "Signing in user profile",
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "example": {
                    "username": "user1",
                    "password": "password"
                }
            },
            "200_one": {
                "description": "\"data\"-field contains requested object.",
                "required": [
                    "data"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object"
                    }
                }
            },
            "RoutingCoordinates": {
                "description": "Rote calculation by coordinates",
                "required": [
                    "coordinates"
                ],
                "type": "object",
                "properties": {
                    "coordinates": {
                        "description": "array with arrays in form longitude, latitude",
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "format": "float",
                                "type": "number"
                            }
                        },
                        "example": [
                            [
                                24.9120593,
                                60.1598419
                            ],
                            [
                                24.9686917,
                                60.1836934
                            ]
                        ]
                    },
                    "startCoordinateIndex": {
                        "format": "int32",
                        "type": "integer",
                        "example": 0
                    },
                    "endCoordinateIndex": {
                        "format": "int32",
                        "type": "integer",
                        "example": 0
                    },
                    "avoidCityCenters": {
                        "type": "boolean",
                        "example": true
                    },
                    "cityCentersToAvoid": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Helsinki"
                        ]
                    },
                    "isTrafficSituation": {
                        "type": "boolean",
                        "example": true
                    }
                }
            }
        },
        "responses": {
            "200": {
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "\"data\"-field contains array of requested objects. \"metadata\"-field contains the pagination data",
                            "required": [],
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            }
                                        }
                                    }
                                },
                                "metadata": {
                                    "type": "object",
                                    "properties": {
                                        "currentPage": {
                                            "description": "The current page number",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "limit": {
                                            "description": "The limit of items per page",
                                            "type": "integer",
                                            "example": 20
                                        }
                                    }
                                }
                            }
                        },
                        "example": {
                            "data": [
                                {
                                    "username": "user1",
                                    "id": 3
                                },
                                {
                                    "username": "user2",
                                    "id": 4
                                }
                            ],
                            "metadata": {
                                "currentPage": 1,
                                "limit": 20
                            }
                        }
                    }
                },
                "description": "Successful request, response with body. "
            },
            "201": {
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "\"data\"-field contains created object.",
                            "required": [],
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "Successfully created, response with created object."
            },
            "204": {
                "description": "Successful request, response with no body. ",
                "x-last-modified": 1718887121189
            },
            "400": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIErrorRes"
                        },
                        "example": {
                            "errors": [
                                {
                                    "reason": "NOT_STRING",
                                    "status": 400,
                                    "location": "body",
                                    "message": "\"username\" field must be a string",
                                    "endpoint": "/api/v2/data/profile",
                                    "field": "Authorization",
                                    "name": "VALIDATION",
                                    "type": "APIError"
                                }
                            ]
                        }
                    }
                },
                "description": "Validation error response. Some of the fields are not specified, have wrong data type or otherwise in wrong format"
            },
            "401": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIErrorRes"
                        },
                        "example": {
                            "errors": [
                                {
                                    "reason": "AUTHENTICATION_FAILED",
                                    "status": 401,
                                    "location": "header",
                                    "message": "Could not authenticate with provided token. Token is invalid or expired",
                                    "endpoint": "/api/v2/data/profile",
                                    "field": "Authorization",
                                    "name": "NOT_AUTHENTICATED",
                                    "type": "APIError"
                                }
                            ]
                        }
                    }
                },
                "description": "Authentication error response. It may occur if the request does not contain \"Authorization\" header with the Bearer token",
                "x-last-modified": 1718629884243
            },
            "403": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIErrorRes"
                        },
                        "example": {
                            "errors": [
                                {
                                    "reason": "NOT_AUTHORIZED",
                                    "status": 403,
                                    "message": "Action execution denied",
                                    "endpoint": "/api/v2/data/profile",
                                    "name": "NOT_AUTHORIZED",
                                    "type": "APIError"
                                }
                            ]
                        }
                    }
                },
                "description": "Authorization error response. It may occur if the user is not allowed to execute certain action",
                "x-last-modified": 1718630393958
            },
            "404": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIErrorRes"
                        },
                        "example": {
                            "errors": [
                                {
                                    "reason": "NOT_FOUND",
                                    "status": 404,
                                    "location": "param",
                                    "message": "Could not find any objects",
                                    "endpoint": "/api/v2/data/profile",
                                    "field": "id",
                                    "name": "NOT_FOUND",
                                    "type": "APIError"
                                }
                            ]
                        }
                    }
                },
                "description": "Nothing found",
                "x-last-modified": 1718889834399
            },
            "409": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIErrorRes"
                        },
                        "example": {
                            "errors": [
                                {
                                    "reason": "NOT_UNIQUE",
                                    "status": 409,
                                    "location": "body",
                                    "message": "User with that username already exists",
                                    "endpoint": "/api/v2/data/profile",
                                    "field": "username",
                                    "name": "BAD_REQUEST",
                                    "type": "APIError"
                                }
                            ]
                        }
                    }
                },
                "description": "Conflict error response. It may occur if some of the request field(s) is not unique",
                "x-last-modified": 1718631266638
            },
            "500": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIErrorRes"
                        },
                        "example": {
                            "errors": [
                                {
                                    "reason": "UNEXPECTED",
                                    "status": 500,
                                    "message": "Unexpected server error occurred",
                                    "endpoint": "/api/v2/data/profile",
                                    "additional": {
                                        "message": "throwAPIError is not defined",
                                        "stack": "ReferenceError: throwAPIError is not defined\n    at createProfile (file:///app/server/router/api/v2/data/profile.js:25:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/server/router/api/v2/routeBuilder/core/pipelineHandlers/addController.js:12:30",
                                        "name": "ReferenceError"
                                    },
                                    "name": "UNEXPECTED",
                                    "type": "APIError"
                                }
                            ]
                        }
                    }
                },
                "description": "Server error response. It occurs unexpectedly. The additional field contains an error object",
                "x-last-modified": 1718631059302
            },
            "200_one": {
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "\"data\"-field contains requested object.",
                            "required": [],
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object"
                                }
                            }
                        },
                        "example": {
                            "data": {
                                "username": "user1",
                                "id": 1
                            }
                        }
                    }
                },
                "description": "Successful request, response with body. "
            },
            "503_daily_limit": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "errors": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "reason": {
                                                "type": "string",
                                                "example": "SERVICE_NOT_AVAILABLE"
                                            },
                                            "status": {
                                                "format": "int32",
                                                "type": "integer",
                                                "example": 503
                                            },
                                            "location": {
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "message": {
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "endpoint": {
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "field": {
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "additional": {
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "SERVER_ERROR"
                                            },
                                            "type": {
                                                "type": "string",
                                                "example": "APIError"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Daily limit exceeded for the whole application and all clients, wherefore another requests can not be done"
            }
        },
        "parameters": {
            "id": {
                "deprecated": false,
                "example": "1",
                "name": "id",
                "description": "object id field",
                "schema": {
                    "type": "number"
                },
                "in": "path",
                "required": true,
                "x-last-modified": 1718888734807
            }
        },
        "examples": {
            "ProfileCreate": {
                "summary": "Example of ProfileCreate request object",
                "value": {
                    "username": "user1",
                    "password": "my_password"
                }
            }
        },
        "securitySchemes": {
            "BearerAuth": {
                "scheme": "bearer",
                "type": "http",
                "description": "Bearer token"
            }
        }
    },
    "security": [
        {
            "BearerAuth": []
        }
    ],
    "tags": [
        {
            "name": "profile",
            "description": "profile"
        },
        {
            "name": "client",
            "description": "client"
        },
        {
            "name": "order",
            "description": "order"
        }
    ],
    "externalDocs": {
        "description": "GitHub wikipages",
        "url": "https://github.com/leolab1337/map_app/wiki"
    }
}