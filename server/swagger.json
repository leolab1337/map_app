{
    "openapi": "3.0.3",
    "info": {
        "title": "MapApp",
        "version": "1.0",
        "description": "An API for application, which helps delivery companies to plan their routes.",
        "x-logo": {
            "url": ""
        }
    },
    "servers": [
        {
            "url": "http://localhost:8081/api/v2",
            "description": "Local server"
        }
    ],
    "paths": {
        "/data/profile/{id}": {
            "summary": "User profile",
            "description": "User profile is used to identify a user and allow to sign in to the application. \nSigned in user has more functionality as he/she can save different data associated with the user.",
            "get": {
                "tags": [
                    "profile"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id",
                        "name": "id",
                        "x-last-modified": 1718888757237
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200 one",
                        "x-last-modified": 1718889279313
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718889211678
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718889224633
                    },
                    "404": {
                        "$ref": "#/components/responses/404",
                        "x-last-modified": 1718889898774
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718889259586
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Read profile by id",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |\n| Pagination                       | no |\n| Search                             | no |"
            },
            "delete": {
                "tags": [
                    "profile"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id",
                        "name": "id",
                        "x-last-modified": 1718889306137
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204",
                        "x-last-modified": 1718889326604
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718889339851
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718889350835
                    },
                    "404": {
                        "$ref": "#/components/responses/404",
                        "x-last-modified": 1718889927760
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718889941430
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Delete profile",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |"
            },
            "parameters": [
                {
                    "examples": {
                        "id": {
                            "value": "86"
                        }
                    },
                    "name": "id",
                    "description": "profile id",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/data/client": {
            "summary": "Client",
            "description": "Client is an object representing the client of the delivery company. It has a type field, which may have only \"recipient\" or \"sender\" values. Type \"sender\" is a company from which the parcels are being shipped. Type \"recipient\" is a person/another company to whom a parcels are delivered.\nNotice that only registered users having created a Profile can save their Clients' data.",
            "get": {
                "tags": [
                    "client"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200",
                        "x-last-modified": 1719224505066
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1719224545166
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1719224573070
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Read all Clients",
                "description": "Read all Client associated with the logged-in user Profile. It is possible to request only own Clients\n\n| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own  |\n| Pagination                       | yes |\n| Search                             | yes |"
            },
            "put": {
                "requestBody": {
                    "description": "Notice that only the id field and  fields, that need to be updated should be provided",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "client"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204",
                        "x-last-modified": 1718890060914
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718890078434
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718890117079
                    },
                    "404": {
                        "$ref": "#/components/responses/404",
                        "x-last-modified": 1718890145614
                    },
                    "409": {
                        "$ref": "#/components/responses/409",
                        "x-last-modified": 1718890158175
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718890182150
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Update Client",
                "description": "| Requirement / Function | Is Required / Has |\n| ---------------------- | ----------------- |\n| Authentication         | yes |\n| Authorization          | only own |"
            },
            "post": {
                "requestBody": {
                    "description": "Notice that the Client will be automatically associated with the logged-in user profile",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "client"
                ],
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/201",
                        "x-last-modified": 1718887903713
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718887948467
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718895012807
                    },
                    "409": {
                        "$ref": "#/components/responses/409",
                        "x-last-modified": 1718887965493
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718887982927
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "operationId": "client_create",
                "summary": "Create client",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only for own Profile  |\n"
            }
        },
        "/data/profile": {
            "summary": "User profile",
            "description": "User profile is used to identify a user and allow to sign in to the application. \nSigned in user has more functionality as he/she can save different data associated with the user.",
            "put": {
                "requestBody": {
                    "description": "Notice that only the id field and  fields, that need to be updated should be provided",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "profile"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204",
                        "x-last-modified": 1718890060914
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718890078434
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718890117079
                    },
                    "404": {
                        "$ref": "#/components/responses/404",
                        "x-last-modified": 1718890145614
                    },
                    "409": {
                        "$ref": "#/components/responses/409",
                        "x-last-modified": 1718890158175
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718890182150
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Update profile",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes  |\n| Authorization                  | only own |"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "profile"
                ],
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/201",
                        "x-last-modified": 1718887903713
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718887948467
                    },
                    "409": {
                        "$ref": "#/components/responses/409",
                        "x-last-modified": 1718887965493
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718887982927
                    }
                },
                "summary": "Create user profile",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------  |\n| Authentication             | no |\n| Authorization              | no |"
            }
        },
        "/data/client/{id}": {
            "summary": "Client",
            "description": "Client is an object representing the client of the delivery company. It has a type field, which may have only \"recipient\" or \"sender\" values. Type \"sender\" is a company from which the parcels are being shipped. Type \"recipient\" is a person/another company to whom a parcels are delivered.\nNotice that only registered users having created a Profile can save their Clients' data.",
            "get": {
                "tags": [
                    "client"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200 one",
                        "x-last-modified": 1718889279313
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718889211678
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718889224633
                    },
                    "404": {
                        "$ref": "#/components/responses/404",
                        "x-last-modified": 1718889898774
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718889259586
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Read Client by id",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |\n| Pagination                       | no |\n| Search                             | no |"
            },
            "delete": {
                "tags": [
                    "client"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204",
                        "x-last-modified": 1718889326604
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718889339851
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718889350835
                    },
                    "404": {
                        "$ref": "#/components/responses/404",
                        "x-last-modified": 1718889927760
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718889941430
                    }
                },
                "deprecated": false,
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Delete Client by id",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |"
            },
            "parameters": [
                {
                    "examples": {
                        "id": {
                            "value": "74"
                        }
                    },
                    "name": "id",
                    "description": "client id",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/data/order": {
            "summary": "Order",
            "description": "Order is an object holding a sender and recipient info. These objects can also be used in calculating a route.",
            "get": {
                "tags": [
                    "order"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200",
                        "x-last-modified": 1719224505066
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1719224545166
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1719224573070
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Read all Orders",
                "description": "Read all Orders associated with the logged-in user Profile.\n\n| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own  |\n| Pagination                       | yes |\n| Search                             | no |"
            },
            "put": {
                "requestBody": {
                    "description": "Notice that only the id field and  fields, that need to be updated should be provided",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "order"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Update Order",
                "description": "| Requirement / Function | Is Required / Has |\n| ---------------------- | ----------------- |\n| Authentication         | yes |\n| Authorization          | only own |"
            },
            "post": {
                "requestBody": {
                    "description": "Notice that the Order will be automatically associated with the logged-in user profile",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "order"
                ],
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/201",
                        "x-last-modified": 1718887903713
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718887948467
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718895012807
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718887982927
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Order",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only for own Profile |\n"
            }
        },
        "/data/order/{id}": {
            "summary": "User profile",
            "description": "Order is an object holding a sender and recipient info. These objects can also be used in calculating a route.",
            "get": {
                "tags": [
                    "order"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id",
                        "name": "id",
                        "x-last-modified": 1718888757237
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200 one",
                        "x-last-modified": 1718889279313
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718889211678
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718889224633
                    },
                    "404": {
                        "$ref": "#/components/responses/404",
                        "x-last-modified": 1718889898774
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718889259586
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Read order by id",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |\n| Pagination                       | no |\n| Search                             | no |"
            },
            "delete": {
                "tags": [
                    "order"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id",
                        "name": "id",
                        "x-last-modified": 1718889306137
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204",
                        "x-last-modified": 1718889326604
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718889339851
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718889350835
                    },
                    "404": {
                        "$ref": "#/components/responses/404",
                        "x-last-modified": 1718889927760
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718889941430
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Delete order",
                "description": "| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |"
            },
            "parameters": [
                {
                    "examples": {
                        "id": {
                            "value": "86"
                        }
                    },
                    "name": "id",
                    "description": "order id",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/data/order/done": {
            "post": {
                "requestBody": {
                    "description": "Notice that all ids, which are not associated with the user profile will be ignored",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderDone"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "order"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "summary": "Delivered orders",
                "description": "Delievered orders ids can be sent and they will be deleted from the system.\n\n| Requirement / Function | Is Required / Has |\n| -------------------------- | ------------------  |\n| Authentication                | yes |\n| Authorization                  | only own |"
            }
        },
        "/data/profile/signIn": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SignIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "summary": "Signing in profile",
                "description": "In the response the Bearer token will be returned, which should be used for authentication in the system. Notice that authentication is required for almost every /data endpoints. 403 will be returned if credetials are wrong"
            }
        }
    },
    "components": {
        "schemas": {
            "APIErrorRes": {
                "description": "Error response. Notice that errors field is always an array. Data can be ever empty object, null or undefined.",
                "type": "object",
                "properties": {
                    "data": {
                        "description": "An empty object for the data field",
                        "type": "object"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIError"
                        }
                    }
                },
                "x-last-modified": 1718628043172
            },
            "APIError": {
                "description": "Interface for all errors, which may occur. Notice that the error has type property, which can be used for determining the object type and be parsed accordingly. If any unexpected errors occurred where will be additional field containing the error. The name field is common reason describing what kind of error happened and it is a enum value. The reason field is a concrete reason why the error happened and it is a enum value. The location field is describing possible error place in the request and it a enum value.\n\nErrorName enum:\n| Key | Value |\n| -------- | -------- |\n| NOT_FOUND | 'NOT_FOUND' | \n| BAD_REQUEST | 'BAD_REQUEST' | \n| VALIDATION | 'VALIDATION' | \n| NOT_AUTHENTICATED | 'NOT_AUTHENTICATED' | \n| NOT_AUTHORIZED | 'NOT_AUTHORIZED' | \n| TOO_MANY_REQUESTS | 'TOO_MANY_REQUESTS' | \n| SERVER_ERROR | 'SERVER_ERROR' | \n| UNEXPECTED | 'UNEXPECTED' | \n\nErrorReason enum:\n| Key | Value |\n| -------- | -------- |\n| NOT_FOUND | 'NOT_FOUND' | \n| BAD_REQUEST | 'BAD_REQUEST' | \n| REQUIRED | 'REQUIRED' | \n| NOT_ALLOWED | 'NOT_ALLOWED' | \n| VALIDATION | 'VALIDATION' | \n| NOT_STRING | 'NOT_STRING' | \n| NOT_NUMBER | 'NOT_NUMBER' | \n| NOT_BOOLEAN | 'NOT_BOOLEAN' | \n| NOT_AUTHENTICATED | 'NOT_AUTHENTICATED' | \n| AUTH_TOKEN_NOT_PROVIDED | 'AUTH_TOKEN_NOT_PROVIDED' | \n| INVALID_AUTH_TOKEN_FORMAT | 'INVALID_AUTH_TOKEN_FORMAT' | \n| INVALID_AUTH_TOKEN | 'INVALID_AUTH_TOKEN' | \n| AUTHENTICATION_FAILED | 'AUTHENTICATION_FAILED' | \n| WRONG_CREDENTIALS | 'WRONG_CREDENTIALS' | \n| NOT_AUTHORIZED | 'NOT_AUTHORIZED' | \n| TOO_MANY_REQUESTS | 'TOO_MANY_REQUESTS' | \n| SERVER_MISCONFIGURED | 'SERVER_MISCONFIGURED' | \n| SERVER_ERROR | 'SERVER_ERROR' | \n| UNEXPECTED | 'UNEXPECTED' | \n\nErrorLocation enum:\n| Key | Value |\n| -------- | -------- |\n| HEADER | 'header' | \n| BODY | 'body' | \n| PARAM | 'param' | \n| QUERY | 'query' | ",
                "required": [],
                "enum": [],
                "type": "object",
                "properties": {
                    "reason": {
                        "description": "The reason for the error",
                        "type": "string",
                        "example": "REQUIRED"
                    },
                    "status": {
                        "description": "The HTTP status code",
                        "type": "integer",
                        "example": 400
                    },
                    "location": {
                        "description": "The approximate location of the error",
                        "type": "string",
                        "example": "body"
                    },
                    "message": {
                        "description": "The error message",
                        "type": "string",
                        "example": "\"password\" is required"
                    },
                    "endpoint": {
                        "description": "The endpoint where the error occurred",
                        "type": "string",
                        "example": "/api/v2/data/profile"
                    },
                    "field": {
                        "description": "The field causing the error",
                        "type": "string",
                        "example": "password"
                    },
                    "additional": {
                        "nullable": true,
                        "description": "Additional information about the error",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the error",
                        "type": "string",
                        "example": "VALIDATION"
                    },
                    "type": {
                        "description": "The type of the error",
                        "type": "string",
                        "example": "APIError"
                    }
                },
                "x-last-modified": 1718631391947
            },
            "ProfileCreate": {
                "description": "Profile creation request body",
                "required": [
                    "username",
                    "password"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "description": "unique",
                        "type": "string",
                        "example": "user1"
                    },
                    "password": {
                        "type": "string",
                        "example": "my_password"
                    }
                },
                "x-last-modified": 1718631417714
            },
            "ProfileUpdate": {
                "description": "Profile update request body",
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "read-only",
                        "type": "number",
                        "example": 1
                    },
                    "username": {
                        "description": "unique",
                        "type": "string",
                        "example": "user1"
                    },
                    "password": {
                        "type": "string",
                        "example": "my_password"
                    }
                },
                "x-last-modified": 1718888436324
            },
            "ClientCreate": {
                "description": "Client creation request body",
                "required": [
                    "username",
                    "type",
                    "city",
                    "street",
                    "building"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "description": "unique",
                        "type": "string",
                        "example": "client1"
                    },
                    "name": {
                        "type": "string",
                        "example": "Client Name"
                    },
                    "type": {
                        "description": "recipient or sender",
                        "type": "string",
                        "example": "recipient"
                    },
                    "city": {
                        "type": "string",
                        "example": "Helsinki"
                    },
                    "street": {
                        "description": "street name only, without building",
                        "type": "string",
                        "example": "Punanotkonkatu"
                    },
                    "building": {
                        "description": "can be number or number with letter",
                        "type": "string",
                        "example": "3"
                    },
                    "flat": {
                        "description": "optional and not validated",
                        "type": "integer",
                        "example": 1
                    }
                }
            },
            "OrderUpdate": {
                "description": "Object for updating an order",
                "type": "object",
                "properties": {
                    "senderId": {
                        "description": "foreign key to client table with type sender",
                        "type": "integer",
                        "example": 1
                    },
                    "recipientId": {
                        "description": "foreign key to client table with type recipient",
                        "type": "integer",
                        "example": 1
                    }
                }
            },
            "OrderCreate": {
                "description": "Object for creating an order",
                "type": "object",
                "properties": {
                    "senderId": {
                        "description": "foreign key to client table with type sender",
                        "type": "integer",
                        "example": 1
                    },
                    "recipientId": {
                        "description": "foreign key to client table with type recipient",
                        "type": "integer",
                        "example": 1
                    }
                }
            },
            "OrderDone": {
                "description": "Delivered orders, that can be sent here and be deleted from the system",
                "type": "object",
                "properties": {
                    "orderIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "example": {
                    "orderIds": [
                        1,
                        2,
                        3
                    ]
                }
            },
            "ClientUpdate": {
                "description": "Client update request body",
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "read-only",
                        "type": "integer",
                        "example": 1
                    },
                    "username": {
                        "description": "unique",
                        "type": "string",
                        "example": "client1"
                    },
                    "name": {
                        "type": "string",
                        "example": "Client Name"
                    },
                    "type": {
                        "description": "recipient or sender",
                        "type": "string",
                        "example": "recipient"
                    },
                    "city": {
                        "type": "string",
                        "example": "Helsinki"
                    },
                    "street": {
                        "description": "street name only, without building",
                        "type": "string",
                        "example": "Punanotkonkatu"
                    },
                    "building": {
                        "description": "can be number or number with letter",
                        "type": "string",
                        "example": "3"
                    },
                    "flat": {
                        "description": "optional and not validated",
                        "type": "integer",
                        "example": 1
                    }
                }
            },
            "SignIn": {
                "description": "Signing in user profile",
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "example": {
                    "username": "user1",
                    "password": "password"
                }
            }
        },
        "responses": {
            "200": {
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "\"data\"-field contains array of requested objects. \"metadata\"-field contains the pagination data",
                            "required": [],
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array"
                                },
                                "metadata": {
                                    "type": "object",
                                    "properties": {
                                        "currentPage": {
                                            "description": "The current page number",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "limit": {
                                            "description": "The limit of items per page",
                                            "type": "integer",
                                            "example": 20
                                        }
                                    }
                                }
                            }
                        },
                        "example": {
                            "data": [
                                {
                                    "username": "user1",
                                    "id": 3
                                },
                                {
                                    "username": "user2",
                                    "id": 4
                                }
                            ],
                            "metadata": {
                                "currentPage": 1,
                                "limit": 20
                            }
                        }
                    }
                },
                "description": "Successful request, response with body. ",
                "x-last-modified": 1718887018576
            },
            "201": {
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "\"data\"-field contains created object.",
                            "required": [],
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object"
                                }
                            }
                        },
                        "example": {
                            "data": {
                                "username": "user2",
                                "id": 4
                            }
                        }
                    }
                },
                "description": "Successfully created, response with created object.",
                "x-last-modified": 1718883610294
            },
            "204": {
                "description": "Successful request, response with no body. ",
                "x-last-modified": 1718887121189
            },
            "400": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIErrorRes"
                        },
                        "example": {
                            "errors": [
                                {
                                    "reason": "NOT_STRING",
                                    "status": 400,
                                    "location": "body",
                                    "message": "\"username\" field must be a string",
                                    "endpoint": "/api/v2/data/profile",
                                    "field": "Authorization",
                                    "name": "VALIDATION",
                                    "type": "APIError"
                                }
                            ]
                        }
                    }
                },
                "description": "Validation error response. Some of the fields are not specified, have wrong data type or otherwise in wrong format"
            },
            "401": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIErrorRes"
                        },
                        "example": {
                            "errors": [
                                {
                                    "reason": "AUTHENTICATION_FAILED",
                                    "status": 401,
                                    "location": "header",
                                    "message": "Could not authenticate with provided token. Token is invalid or expired",
                                    "endpoint": "/api/v2/data/profile",
                                    "field": "Authorization",
                                    "name": "NOT_AUTHENTICATED",
                                    "type": "APIError"
                                }
                            ]
                        }
                    }
                },
                "description": "Authentication error response. It may occur if the request does not contain \"Authorization\" header with the Bearer token",
                "x-last-modified": 1718629884243
            },
            "403": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIErrorRes"
                        },
                        "example": {
                            "errors": [
                                {
                                    "reason": "NOT_AUTHORIZED",
                                    "status": 403,
                                    "message": "Action execution denied",
                                    "endpoint": "/api/v2/data/profile",
                                    "name": "NOT_AUTHORIZED",
                                    "type": "APIError"
                                }
                            ]
                        }
                    }
                },
                "description": "Authorization error response. It may occur if the user is not allowed to execute certain action",
                "x-last-modified": 1718630393958
            },
            "404": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIErrorRes"
                        },
                        "example": {
                            "errors": [
                                {
                                    "reason": "NOT_FOUND",
                                    "status": 404,
                                    "location": "param",
                                    "message": "Could not find any objects",
                                    "endpoint": "/api/v2/data/profile",
                                    "field": "id",
                                    "name": "NOT_FOUND",
                                    "type": "APIError"
                                }
                            ]
                        }
                    }
                },
                "description": "Nothing found",
                "x-last-modified": 1718889834399
            },
            "409": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIErrorRes"
                        },
                        "example": {
                            "errors": [
                                {
                                    "reason": "NOT_UNIQUE",
                                    "status": 409,
                                    "location": "body",
                                    "message": "User with that username already exists",
                                    "endpoint": "/api/v2/data/profile",
                                    "field": "username",
                                    "name": "BAD_REQUEST",
                                    "type": "APIError"
                                }
                            ]
                        }
                    }
                },
                "description": "Conflict error response. It may occur if some of the request field(s) is not unique",
                "x-last-modified": 1718631266638
            },
            "500": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIErrorRes"
                        },
                        "example": {
                            "errors": [
                                {
                                    "reason": "UNEXPECTED",
                                    "status": 500,
                                    "message": "Unexpected server error occurred",
                                    "endpoint": "/api/v2/data/profile",
                                    "additional": {
                                        "message": "throwAPIError is not defined",
                                        "stack": "ReferenceError: throwAPIError is not defined\n    at createProfile (file:///app/server/router/api/v2/data/profile.js:25:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/server/router/api/v2/routeBuilder/core/pipelineHandlers/addController.js:12:30",
                                        "name": "ReferenceError"
                                    },
                                    "name": "UNEXPECTED",
                                    "type": "APIError"
                                }
                            ]
                        }
                    }
                },
                "description": "Server error response. It occurs unexpectedly. The additional field contains an error object",
                "x-last-modified": 1718631059302
            },
            "200 one": {
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "\"data\"-field contains requested object.",
                            "required": [],
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object"
                                }
                            }
                        },
                        "example": {
                            "data": {
                                "username": "user1",
                                "id": 1
                            }
                        }
                    }
                },
                "description": "Successful request, response with body. ",
                "x-last-modified": 1718884195366
            }
        },
        "parameters": {
            "id": {
                "deprecated": false,
                "example": "1",
                "name": "id",
                "description": "object id field",
                "schema": {
                    "type": "number"
                },
                "in": "path",
                "required": true,
                "x-last-modified": 1718888734807
            }
        },
        "examples": {
            "ProfileCreate": {
                "summary": "Example of ProfileCreate request object",
                "value": {
                    "username": "user1",
                    "password": "my_password"
                },
                "x-last-modified": 1718622389962
            }
        },
        "securitySchemes": {
            "BearerAuth": {
                "scheme": "bearer",
                "type": "http",
                "description": "Bearer token"
            }
        }
    },
    "security": [
        {
            "BearerAuth": []
        }
    ],
    "tags": [
        {
            "name": "profile",
            "description": "profile",
            "externalDocs": {},
            "x-last-modified": 1718887325659
        },
        {
            "name": "client",
            "description": "client",
            "externalDocs": {},
            "x-last-modified": 1718887355059
        },
        {
            "name": "manufacturer",
            "description": "manufacturer",
            "externalDocs": {},
            "x-last-modified": 1718887379701
        },
        {
            "name": "order",
            "description": "order",
            "externalDocs": {},
            "x-last-modified": 1718894498840
        }
    ],
    "externalDocs": {
        "description": "GitHub wikipages",
        "url": "https://github.com/leolab1337/map_app/wiki"
    }
}